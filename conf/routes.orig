# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index
# An example controller showing how to use dependency injection
GET     /count                      controllers.CountController.count
# An example controller showing how to write asynchronous code
GET     /message                    controllers.AsyncController.message

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

#Login
POST /login controllers.AuthController.authenticate

#POZO
#Agregar un pozo
POST    /pozo                       controllers.PozoController.createPozo
#Modifica el estado del pozo

PUT     /pozo              controllers.PozoController.updatePozo

#Mostrar pozos
GET     /pozo                       controllers.PozoController.getPozos
#Borrar un pozo dado su ID
DELETE  /pozo/:id                   controllers.PozoController.deletePozo(id: Long)

#USUARIO
#Listar todos los Usuarios
GET     /users                      controllers.UserController.getUsers

<<<<<<< HEAD
POST /users controllers.UserController.createUser



=======
>>>>>>> 8e6754958785c79ec200f924a13c47b6caebad2b
#CAMPO
#Agregar un campo
POST    /campo                      controllers.CampoController.createCampo
#Mostrar campos
GET     /campo                      controllers.CampoController.getCampos
#Mostrar campo por ID
GET     /campo/:id                  controllers.CampoController.getCampo(id: Long)
#Muestra todos los campos dada una regi√≥n
GET     /campo/:reg                 controllers.CampoController.getCampoReg(reg: String)
#Borrar un campo
DELETE  /campo/:id                  controllers.CampoController.deleteCampo(id: Long)

#REGISTRO SENSOR DE TEMPERATURA
#Agregar un registro de temperatura
POST    /registro/temp              controllers.RegistroSensorController.createRegistroSensorTemp

#REGISTRO SENSOR DE BARRILES
#Agregar un registro de barril
POST    /registro/barril            controllers.RegistroSensorController.createRegistroSensorBarriles

#REGISTRO SENSOR DE ENERGIA
#Agregar un registro de energia
POST    /registro/energia           controllers.RegistroSensorController.createRegistroSensorEner

#REGISTRO SENSOR DE EMERGENCIA
#Emite un registro de emergencia
POST    /emergencia                 controllers.AlertController.reportAlert
#Marca una emergencia como resuelta y la elimina de la lista de notificaciones
DELETE  /notification/:id           controllers.AlertController.removeNotification(id: Long)

#REPORTES
#Genera un reporte de TEMPERATURA con filtros temporales
POST    /reporte/temp               controllers.ReportController.generateReportTemp
#Genera un reporte de ENERGIA con filtros temporales
POST    /reporte/ener               controllers.ReportController.generateReportEner
#Genera un reporte de EMERGENCIAS con filtros temporales
POST    /reporte/emerg              controllers.ReportController.generateReportEmerg
#Genera un reporte de BARRILES con filtros temporales
POST    /reporte/bar                controllers.ReportController.generateReportBarriles


